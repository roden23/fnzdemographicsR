packrat::init()
packrat::snapshot()
devtools::load_all(".")
install.packages('devtools')
devtools::load_all(".")
packrat::snapshot()
packrat::restore()
devtools::load_all(".")
packrat::repos_list()
devtools::load_all(".")
packrat::restore()
packrat::snapshot()
devtools::load_all(".")
GetInceptionYearDistribution()
devtools::load_all(".")
demographics <- mongolite::mongo(collection = "demographics", db = "datasets", url = "mongodb://localhost")
demographicsData <- demographics$find()
demographicsData <- data.table::as.data.table(demographicsData)
demographicsData[, InceptionDateYearMonth := format(demographicsData$InceptionDate, "%Y-%m")]
demographicsData <- AddAgeGroups(demographicsData)
AddNewInvestorFlag <- function(inputData, months) {
RelevantDate <- AddMonths(Sys.Date() , -1 * months)
inputData[ ,paste('NewInvestor',months,'Months', sep = '')] <- 0
inputData[ inputData$InceptionDate >= RelevantDate, paste('NewInvestor',months,'Months', sep = '')] <- 1
return(inputData)
}
AddAgeGroups <- function(inputData) {
inputData$AgeGroup <- 'unknown'
agebreaks <- c(0,30,50,60,70,80,500)
agelabels <- c("<30","30-49","50-59","60-69","70-79","80+")
inputData[, AgeGroup := cut(inputData$Age, breaks = agebreaks, right = FALSE, labels = agelabels)]
return(inputData)
}
demographicsData <- AddAgeGroups(demographicsData)
demographicsData <- AddNewInvestorFlag(demographicsData, 1)
demographicsData <- AddNewInvestorFlag(demographicsData, 6)
demographicsData <- AddNewInvestorFlag(demographicsData, 12)
AddMonths <- function(date, n) {
seq(as.Date(date), by = paste(n, "months"), length = 2)[2]
}
demographicsData <- AddAgeGroups(demographicsData)
demographicsData <- AddNewInvestorFlag(demographicsData, 1)
demographicsData <- AddNewInvestorFlag(demographicsData, 6)
demographicsData <- AddNewInvestorFlag(demographicsData, 12)
demographicsDerived <- mongolite::mongo(collection = "demographics_derived", db = "datasets", url = "mongodb://localhost")
demographicsDerived$insert(data = demographicsData)
demographics <- mongolite::mongo(collection = "demographics", db = "datasets", url = "mongodb://localhost")
demographicsData <- demographics$find()
View(demographicsData)
demographicsData <- data.table::as.data.table(demographicsData)
View(demographicsData)
demographicsData[, InceptionDateYearMonth := format(demographicsData$InceptionDate, "%Y-%m")]
View(demographicsData)
demographicsData <- AddAgeGroups(demographicsData)
AddMonths <- function(date, n) {
seq(as.Date(date), by = paste(n, "months"), length = 2)[2]
}
AddNewInvestorFlag <- function(inputData, months) {
RelevantDate <- AddMonths(Sys.Date() , -1 * months)
inputData[ ,paste('NewInvestor',months,'Months', sep = '')] <- 0
inputData[ inputData$InceptionDate >= RelevantDate, paste('NewInvestor',months,'Months', sep = '')] <- 1
return(inputData)
}
AddAgeGroups <- function(inputData) {
inputData$AgeGroup <- 'unknown'
agebreaks <- c(0,30,50,60,70,80,500)
agelabels <- c("<30","30-49","50-59","60-69","70-79","80+")
inputData[, AgeGroup := cut(inputData$Age, breaks = agebreaks, right = FALSE, labels = agelabels)]
return(inputData)
}
demographicsData <- AddAgeGroups(demographicsData)
AddNewInvestorFlag <- function(inputData, months) {
RelevantDate <- AddMonths(Sys.Date() , -1 * months)
inputData[ ,paste0('NewInvestor',months,'Months')] <- 0
inputData[ inputData$InceptionDate >= RelevantDate, paste('NewInvestor',months,'Months', sep = '')] <- 1
return(inputData)
}
demographicsData <- AddNewInvestorFlag(demographicsData, 1)
AddMonths <- function(date, n) {
seq(as.POSIXct.Date(date), by = paste(n, "months"), length = 2)[2]
}
demographicsData <- AddNewInvestorFlag(demographicsData, 1)
View(demographicsData)
demographicsData <- AddNewInvestorFlag(demographicsData, 6)
demographicsData <- AddNewInvestorFlag(demographicsData, 12)
demographicsDerived <- mongolite::mongo(collection = "demographics_derived", db = "datasets", url = "mongodb://localhost")
View(demographicsData)
demographics <- mongolite::mongo(collection = "demographics", db = "datasets", url = "mongodb://localhost")
query <- '{}';
if (!is.null(platform)) {
query <- paste0('{"Platform" : "', platform, '"}');
}
demographicsData <- demographics$find(query)
rm(demographics)
demographicsData <- data.table::as.data.table(demographicsData)
demographicsData <- AddDerivedData(demographicsData)
#this should go from BQ as aggregated columns or can be derived in app that uses it?
AddDerivedData <- function(demographicsData) {
demographicsData[, InceptionDateYearMonth := format(demographicsData$InceptionDate, "%Y-%m")]
demographicsData <- AddAgeGroups(demographicsData)
demographicsData <- AddNewInvestorFlag(demographicsData, 1)
demographicsData <- AddNewInvestorFlag(demographicsData, 6)
demographicsData <- AddNewInvestorFlag(demographicsData, 12)
return(demographicsData)
}
demographicsData <- AddDerivedData(demographicsData)
demographicsDerived <- mongolite::mongo(collection = "demographics_derived", db = "datasets", url = "mongodb://localhost")
demographicsDerived$drop()
demographicsDerived$insert(demographicsData)
devtools::load_all(".")
DeriveData()
GetInceptionYearDistribution()
GetDataset('SIM')
devtools::load_all(".")
GetDataset()
library(fnzdemographicsR)
getwd()
getOption("repos")
r["FnzRepository"] <- "file:///C:/fnz-git-hub/Fnz.Predict/FnzRepository"
r <- getOption("repos")
library(fnzdemographicsR)
library(drat)
getwd()
